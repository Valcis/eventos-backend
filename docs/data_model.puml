@startuml

title EVENTOS Data Model

skinparam shadowing true
skinparam classAttributeIconSize 0
'skinparam wrapWidth 320
'skinparam linetype ortho
left to right direction
hide empty methods

!define COLLECTION <<collection>>
!define DB <<db>>

' ================= ENTIDADES =================

class Events DB {
  id: string
  createdAt: Date
  updatedAt: Date
  name: string
  date: Date
  capacity?: Integer
  capitalAmount?: Decimal (7,2)
}

class Reservations COLLECTION {
  id: string
  eventId: string
  createdAt: Date
  updatedAt: Date
  notes?: string
  isActive?: boolean
  reserver: string
  order: object //{[productId: string]: qty: Integer}
  totalAmount: Decimal (7,2)
  salespersonId: string
  consumptionTypeId: string
  pickupPointId?: string
  hasPromoApplied: boolean
  linkedReservations: array [ReservationIds..]
  deposit: Decimal (7,2)
  isDelivered: boolean
  isPaid: boolean
  paymentMethodId: string
  cashierId?: string
}

class Products COLLECTION {
  id: string
  eventId: string
  createdAt: Date
  updatedAt: Date
  notes?: string
  isActive?: boolean
  name: string
  description?: string
  stock: Integer
  promotions: string [Promotions..]
  nominalPrice?: Decimal (7,2)
  supplement?: object {ConsumptionTypeId:Integer}
}

class Promotions COLLECTION {
  id: string
  eventId: string
  createdAt: Date
  updatedAt: Date
  notes?: string
  isActive?: boolean
  targets: TargetFilters  ' Nuevo bloque de target
  name: string
  description?: string
  rule: enum Rules
  condition: object  ' JSON/filtros
  startDate: Date
  endDate: Date
  priority: Integer
  isCumulative: boolean
}

class TargetFilters {
  +productIds: string[*]
  +categoryIds: string[*]
  +paymentMethods: PaymentMethod[*]
  +consumptionTypes: ConsumptionType[*]
}



class Expenses COLLECTION {
  id: string
  eventId: string
  createdAt: Date
  updatedAt: Date
  notes?: string
  isActive?: boolean
  ingredient: string
  unitId?: string
  quantity?: Decimal (5,2)
  basePrice: Decimal (7,2)
  vatPct: enum{0%,4%,10%,21%}
  vatAmount: Decimal (7,2)
  netPrice: Decimal (7,2)
  isPackage: boolean
  unitsPerPack?: Integer
  unitPrice?: Decimal (7,2)
  payerId: string
  storeId?: string
  isVerified: boolean
}

class Salespeople COLLECTION {
  id: string
  eventId: string
  createdAt: Date
  updatedAt: Date
  notes?: string
  isActive?: boolean
  name: string
  phone: string
}

class PaymentMethods COLLECTION {
   id: string
   eventId: string
   createdAt: Date
   updatedAt: Date
   notes?: string
   isActive?: boolean
   name: string
}

class Cashiers COLLECTION {
  id: string
  eventId: string
  createdAt: Date
  updatedAt: Date
  notes?: string
  isActive?: boolean
  name: string
  phone: string
}

class Stores COLLECTION {
  id: string
  eventId: string
  createdAt: Date
  updatedAt: Date
  notes?: string
  isActive?: boolean
  name: string
  seller?: string
  phone?: string
  address?: string
  email?: string
  openingHours?:string
}

class Units COLLECTION {
  id: string
  eventId: string
  createdAt: Date
  updatedAt: Date
  notes?: string
  isActive?: boolean
  name: string
  abbreviation: string
}

class ConsumptionTypes COLLECTION {
  id: string
  eventId: string
  createdAt: Date
  updatedAt: Date
  notes?: string
  isActive?: boolean
  name: string
}

class Payers COLLECTION {
  id: string
  eventId: string
  createdAt: Date
  updatedAt: Date
  notes?: string
  isActive?: boolean
  name: string
  phone?: string
}

class PickupPoints COLLECTION {
  id: string
  eventId: string
  createdAt: Date
  updatedAt: Date
  notes?: string
  isActive?: boolean
  name: string
  dealerName?: string
  phone?: string
  address?: string
  email?: string
  openingHours?:string
}

class Partners COLLECTION {
  id: string
  eventId: string
  createdAt: Date
  updatedAt: Date
  notes?: string
  isActive?: boolean
  name: string
  stake: Decimal (5,2)
  phone?: string
  email?: string
}

Enum Rules {
  PercentageDiscount
  DiscountPerUnit
  BulkPrice
  ComboDiscount
  FixedPriceBundle
  BuyXGetYFree
}


' ================= RELACIONES =================

'Event → resto (1 a muchos)
Events "1" --> "0..*" Reservations : eventId
Events "1" --> "0..*" Products : eventId
Events "1" --> "0..*" Promotions : eventId
Events "1" --> "0..*" Expenses : eventId
Events "1" --> "0..*" Salespeople : eventId
Events "1" --> "0..*" PaymentMethods : eventId
Events "1" --> "0..*" Cashiers : eventId
Events "1" --> "0..*" Stores : eventId
Events "1" --> "0..*" Units : eventId
Events "1" --> "0..*" ConsumptionTypes : eventId
Events "1" --> "0..*" Payers : eventId
Events "1" --> "0..*" PickupPoints : eventId
Events "1" --> "0..*" Partners : eventId


' Reservas → metadatos opcionales
Reservations --> "1" Salespeople : salespersonId
Reservations --> "1" ConsumptionTypes : consumptionTypeId
Reservations --> "0..1" PickupPoints : pickupPointId
Reservations --> "1" PaymentMethods : paymentMethodId
Reservations --> "1" Cashiers : cashierId
Reservations ..> Products : keys(order) (productId)


' Gastos → metadatos opcionales
Expenses --> "0..1" Units : unitId
Expenses --> "1" Payers : payerId
Expenses --> "0..1" Stores : storeId


Promotions o-- TargetFilters
Rules --o Promotions
Conditions --o Promotions






' ===== Core =====
class Conditions {
    ***** validar que no haya solapamiento de reglas
}

' ===== Conditions por Regla =====
class PercentageDiscountConditions {
  +percent: int  ' 1..99
  +maxUnits: int [0..*]  ' opcional; límite de unidades con descuento
  +maxDiscountAmount: int [0..*]  ' en minor units; opcional
}

class DiscountPerUnitConditions {
  +amountPerUnit: int  ' >= 1; minor units
  +maxUnits: int [0..*]  ' opcional
  ' Nota: precio final por unidad nunca < 0 (regla de negocio)
}

class BulkPriceTier {
  +minQty: int  ' >= 1
  +unitPrice: int  ' >= 1; minor units
}

class BulkPriceConditions {
  +tiers: BulkPriceTier[*]  ' orden asc por minQty; sin solapes
  +perSku: boolean = true  ' cantidades se computan por SKU (no agregadas)
  +maxUnits: int [0..*]  ' opcional
}

class ComboDiscountConditions {
  +minSubtotal: int  ' >= 1; minor units del combo
  +percent: int [1..99]  ' uno de percent|amount
  +amount: int [>=1]     ' uno de percent|amount
  +maxDiscountAmount: int [0..*]  ' opcional
  +maxUnits: int [0..*]  ' opcional (si aplica por ítem)
}

class BundleItem {
  +productId: string
  +minQty: int  ' >= 1
}

class FixedPriceBundleConditions {
  +items: BundleItem[*]  ' cantidades mínimas por ítem
  +bundlePrice: int  ' >= 1; minor units
  +repeatable: boolean = false
}

class BuyXGetYFreeConditions {
  +buyQty: int  ' >= 1
  +getQty: int  ' >= 1
  +discountPercentOnY: int  ' 1..100
  +selectCheapestY: boolean = true
  +repeatable: boolean = true
  +cheapestGetsDiscount: boolean = true
  +maxUnits: int [0..*]  ' opcional
}

' ===== Mapeo rule -> conditions (informativo) =====
Conditions --> PercentageDiscountConditions : rule=PercentageDiscount
Conditions --> DiscountPerUnitConditions : rule=DiscountPerUnit
Conditions --> BulkPriceConditions : rule=BulkPrice
Conditions --> ComboDiscountConditions : rule=ComboDiscount
Conditions --> FixedPriceBundleConditions : rule=FixedPriceBundle
Conditions --> BuyXGetYFreeConditions : rule=BuyXGetYFree

BulkPriceTier --o BulkPriceConditions
BundleItem --o FixedPriceBundleConditions



note bottom of Reservations
order es un mapa productId→qty.
Validar: productos existen, mismo eventId,
qty > 0 y reglas de negocio antes de confirmar.
end note

@enduml