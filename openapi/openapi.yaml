openapi: 3.1.0
info:
  title: Eventos API
  version: "2.0.0"
servers:
  - url: /api/
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Id:
      type: string
      description: Identificador opaco (string)
    DateTime:
      type: string
      format: date-time
      description: Fecha/hora ISO 8601 (UTC)
    Percentage:
      type: number
      minimum: 0
      maximum: 100
      description: Porcentaje 0..100
    Money:
      type: string
      pattern: '^-?(0|[1-9]\d{0,4})\.\d{2}$'
      description: Importes con 5 enteros + 2 decimales, representados como string
    Quantity:
      type: string
      pattern: '^(0|[1-9]\d{0,4})\.\d{2}$'
      description: Cantidades con 5 enteros + 2 decimales como string
    SoftDelete:
      type: object
      required: [ isActive ]
      properties:
        isActive: { type: boolean }

    Event:
      allOf:
        - $ref: '#/components/schemas/SoftDelete'
        - type: object
          required: [ id, name, date, createdAt, updatedAt ]
          properties:
            id: { $ref: '#/components/schemas/Id' }
            name: { type: string, minLength: 1 }
            date: { $ref: '#/components/schemas/DateTime' }
            capacity: { type: integer, minimum: 0 }
            capitalAmount: { $ref: '#/components/schemas/Money' }
            createdAt: { $ref: '#/components/schemas/DateTime' }
            updatedAt: { $ref: '#/components/schemas/DateTime' }

    Reservation:
      allOf:
        - $ref: '#/components/schemas/SoftDelete'
        - type: object
          required: [ id, eventId, reserver, order, totalAmount, hasPromoApplied, isPaid, createdAt, updatedAt ]
          properties:
            id: { $ref: '#/components/schemas/Id' }
            eventId: { $ref: '#/components/schemas/Id' }
            reserver: { type: string, minLength: 1 }
            order:
              type: object
              additionalProperties:
                type: integer
                minimum: 1
              description: Mapa productId -> cantidad (>0)
            totalAmount: { $ref: '#/components/schemas/Money' }
            salespersonId: { $ref: '#/components/schemas/Id' }
            consumptionTypeId: { $ref: '#/components/schemas/Id' }
            pickupPointId: { $ref: '#/components/schemas/Id' }
            hasPromoApplied: { type: boolean }
            linkedReservations:
              type: array
              items: { $ref: '#/components/schemas/Id' }
            deposit: { $ref: '#/components/schemas/Money' }
            isDelivered: { type: boolean }
            isPaid: { type: boolean }
            paymentMethodId: { $ref: '#/components/schemas/Id' }
            cashierId: { $ref: '#/components/schemas/Id' }
            notes: { type: string }
            createdAt: { $ref: '#/components/schemas/DateTime' }
            updatedAt: { $ref: '#/components/schemas/DateTime' }

    Product:
      allOf:
        - $ref: '#/components/schemas/SoftDelete'
        - type: object
          required: [ id, eventId, name, price, vatPct, vatAmount, netPrice, isPackage, createdAt, updatedAt ]
          properties:
            id: { $ref: '#/components/schemas/Id' }
            eventId: { $ref: '#/components/schemas/Id' }
            name: { type: string, minLength: 1 }
            description: { type: string }
            price: { $ref: '#/components/schemas/Money' }
            vatPct: { type: integer, enum: [ 0,4,10,21 ] }
            vatAmount: { $ref: '#/components/schemas/Money' }
            netPrice: { $ref: '#/components/schemas/Money' }
            isPackage: { type: boolean }
            unitsPerPack: { type: integer, minimum: 1 }
            unitPrice: { $ref: '#/components/schemas/Money' }
            promotions:
              type: array
              items: { $ref: '#/components/schemas/Id' }
            nominalPrice: { $ref: '#/components/schemas/Money' }
            supplement: { type: string }
            createdAt: { $ref: '#/components/schemas/DateTime' }
            updatedAt: { $ref: '#/components/schemas/DateTime' }

    PromotionRule:
      type: string
      enum: [ XForY, DiscountPerUnit, BulkPrice, PercentageDiscount, ComboDiscount, FixedPriceBundle, BuyXGetYFree, MaxUnitsDiscounted, FirstXUnitsFree, TimeLimitedDiscount ]

    PromotionConditions:
      description: "Esquemas por rule"
      oneOf:
        - allOf:
            - type: object
              properties: { _rule: { const: XForY } }
            - type: object
              required: [ buyX, payY ]
              properties:
                buyX: { type: integer, minimum: 1 }
                payY: { type: integer, minimum: 1 }
        - allOf:
            - type: object
              properties: { _rule: { const: DiscountPerUnit } }
            - type: object
              oneOf:
                - required: [ amountOff ]
                - required: [ pctOff ]
              properties:
                amountOff: { $ref: '#/components/schemas/Money' }
                pctOff: { $ref: '#/components/schemas/Percentage' }
        - allOf:
            - type: object
              properties: { _rule: { const: BulkPrice } }
            - type: object
              required: [ minQty, bulkUnitPrice ]
              properties:
                minQty: { type: integer, minimum: 1 }
                bulkUnitPrice: { $ref: '#/components/schemas/Money' }
        - allOf:
            - type: object
              properties: { _rule: { const: PercentageDiscount } }
            - type: object
              required: [ pct ]
              properties:
                pct: { $ref: '#/components/schemas/Percentage' }
        - allOf:
            - type: object
              properties: { _rule: { const: ComboDiscount } }
            - type: object
              required: [ combo, comboPrice ]
              properties:
                combo:
                  type: array
                  minItems: 1
                  items:
                    type: object
                    required: [ productId, qty ]
                    properties:
                      productId: { $ref: '#/components/schemas/Id' }
                      qty: { type: integer, minimum: 1 }
                comboPrice: { $ref: '#/components/schemas/Money' }
        - allOf:
            - type: object
              properties: { _rule: { const: FixedPriceBundle } }
            - type: object
              required: [ items, totalPrice ]
              properties:
                items:
                  type: array
                  minItems: 1
                  items:
                    type: object
                    required: [ productId, qty ]
                    properties:
                      productId: { $ref: '#/components/schemas/Id' }
                      qty: { type: integer, minimum: 1 }
                totalPrice: { $ref: '#/components/schemas/Money' }
        - allOf:
            - type: object
              properties: { _rule: { const: BuyXGetYFree } }
            - type: object
              required: [ buyX, getY ]
              properties:
                buyX: { type: integer, minimum: 1 }
                getY: { type: integer, minimum: 1 }
                productId: { $ref: '#/components/schemas/Id' }
        - allOf:
            - type: object
              properties: { _rule: { const: MaxUnitsDiscounted } }
            - type: object
              required: [ maxUnits ]
              properties:
                maxUnits: { type: integer, minimum: 1 }
                pct: { $ref: '#/components/schemas/Percentage' }
                amountOff: { $ref: '#/components/schemas/Money' }
        - allOf:
            - type: object
              properties: { _rule: { const: FirstXUnitsFree } }
            - type: object
              required: [ freeUnits ]
              properties:
                freeUnits: { type: integer, minimum: 1 }
        - allOf:
            - type: object
              properties: { _rule: { const: TimeLimitedDiscount } }
            - type: object
              required: [ start, end ]
              properties:
                start: { $ref: '#/components/schemas/DateTime' }
                end: { $ref: '#/components/schemas/DateTime' }
                pct: { $ref: '#/components/schemas/Percentage' }
                amountOff: { $ref: '#/components/schemas/Money' }

    Promotion:
      allOf:
        - $ref: '#/components/schemas/SoftDelete'
        - type: object
          required: [ id, eventId, name, rule, startDate, endDate, priority, isCumulative, createdAt, updatedAt ]
          properties:
            id: { $ref: '#/components/schemas/Id' }
            eventId: { $ref: '#/components/schemas/Id' }
            name: { type: string, minLength: 1 }
            description: { type: string }
            rule: { $ref: '#/components/schemas/PromotionRule' }
            conditions:
              $ref: '#/components/schemas/PromotionConditions'
            applicables:
              type: array
              items: { $ref: '#/components/schemas/Id' }
            startDate: { $ref: '#/components/schemas/DateTime' }
            endDate: { $ref: '#/components/schemas/DateTime' }
            priority: { type: integer }
            isCumulative: { type: boolean }
            createdAt: { $ref: '#/components/schemas/DateTime' }
            updatedAt: { $ref: '#/components/schemas/DateTime' }

    Expense:
      allOf:
        - $ref: '#/components/schemas/SoftDelete'
        - type: object
          required: [ id, eventId, ingredient, basePrice, vatPct, vatAmount, netPrice, isPackage, payerId, isVerified, createdAt, updatedAt ]
          properties:
            id: { $ref: '#/components/schemas/Id' }
            eventId: { $ref: '#/components/schemas/Id' }
            ingredient: { type: string, minLength: 1 }
            unitId: { $ref: '#/components/schemas/Id' }
            quantity: { $ref: '#/components/schemas/Quantity' }
            basePrice: { $ref: '#/components/schemas/Money' }
            vatPct: { type: integer, enum: [ 0,4,10,21 ] }
            vatAmount: { $ref: '#/components/schemas/Money' }
            netPrice: { $ref: '#/components/schemas/Money' }
            isPackage: { type: boolean }
            unitsPerPack: { type: integer, minimum: 1 }
            unitPrice: { $ref: '#/components/schemas/Money' }
            payerId: { $ref: '#/components/schemas/Id' }
            storeId: { $ref: '#/components/schemas/Id' }
            isVerified: { type: boolean }
            notes: { type: string }
            createdAt: { $ref: '#/components/schemas/DateTime' }
            updatedAt: { $ref: '#/components/schemas/DateTime' }

    Salesperson:
      allOf:
        - $ref: '#/components/schemas/SoftDelete'
        - type: object
          required: [ id, eventId, name, phone, createdAt, updatedAt ]
          properties:
            id: { $ref: '#/components/schemas/Id' }
            eventId: { $ref: '#/components/schemas/Id' }
            name: { type: string }
            phone: { type: string }
            notes: { type: string }
            createdAt: { $ref: '#/components/schemas/DateTime' }
            updatedAt: { $ref: '#/components/schemas/DateTime' }

    PaymentMethod:
      allOf:
        - $ref: '#/components/schemas/SoftDelete'
        - type: object
          required: [ id, eventId, name, createdAt, updatedAt ]
          properties:
            id: { $ref: '#/components/schemas/Id' }
            eventId: { $ref: '#/components/schemas/Id' }
            name: { type: string }
            notes: { type: string }
            createdAt: { $ref: '#/components/schemas/DateTime' }
            updatedAt: { $ref: '#/components/schemas/DateTime' }

    Cashier:
      allOf:
        - $ref: '#/components/schemas/SoftDelete'
        - type: object
          required: [ id, eventId, name, phone, createdAt, updatedAt ]
          properties:
            id: { $ref: '#/components/schemas/Id' }
            eventId: { $ref: '#/components/schemas/Id' }
            name: { type: string }
            phone: { type: string }
            notes: { type: string }
            createdAt: { $ref: '#/components/schemas/DateTime' }
            updatedAt: { $ref: '#/components/schemas/DateTime' }

    Store:
      allOf:
        - $ref: '#/components/schemas/SoftDelete'
        - type: object
          required: [ id, eventId, name, createdAt, updatedAt ]
          properties:
            id: { $ref: '#/components/schemas/Id' }
            eventId: { $ref: '#/components/schemas/Id' }
            name: { type: string }
            seller: { type: string }
            phone: { type: string }
            address: { type: string }
            email: { type: string }
            openingHours: { type: string }
            notes: { type: string }
            createdAt: { $ref: '#/components/schemas/DateTime' }
            updatedAt: { $ref: '#/components/schemas/DateTime' }

    Unit:
      allOf:
        - $ref: '#/components/schemas/SoftDelete'
        - type: object
          required: [ id, eventId, name, abbreviation, createdAt, updatedAt ]
          properties:
            id: { $ref: '#/components/schemas/Id' }
            eventId: { $ref: '#/components/schemas/Id' }
            name: { type: string }
            abbreviation: { type: string }
            notes: { type: string }
            createdAt: { $ref: '#/components/schemas/DateTime' }
            updatedAt: { $ref: '#/components/schemas/DateTime' }

    ConsumptionType:
      allOf:
        - $ref: '#/components/schemas/SoftDelete'
        - type: object
          required: [ id, eventId, name, createdAt, updatedAt ]
          properties:
            id: { $ref: '#/components/schemas/Id' }
            eventId: { $ref: '#/components/schemas/Id' }
            name: { type: string }
            notes: { type: string }
            createdAt: { $ref: '#/components/schemas/DateTime' }
            updatedAt: { $ref: '#/components/schemas/DateTime' }

    Payer:
      allOf:
        - $ref: '#/components/schemas/SoftDelete'
        - type: object
          required: [ id, eventId, name, createdAt, updatedAt ]
          properties:
            id: { $ref: '#/components/schemas/Id' }
            eventId: { $ref: '#/components/schemas/Id' }
            name: { type: string }
            phone: { type: string }
            notes: { type: string }
            createdAt: { $ref: '#/components/schemas/DateTime' }
            updatedAt: { $ref: '#/components/schemas/DateTime' }

    PickupPoint:
      allOf:
        - $ref: '#/components/schemas/SoftDelete'
        - type: object
          required: [ id, eventId, name, createdAt, updatedAt ]
          properties:
            id: { $ref: '#/components/schemas/Id' }
            eventId: { $ref: '#/components/schemas/Id' }
            name: { type: string }
            dealerName: { type: string }
            phone: { type: string }
            address: { type: string }
            email: { type: string }
            openingHours: { type: string }
            notes: { type: string }
            createdAt: { $ref: '#/components/schemas/DateTime' }
            updatedAt: { $ref: '#/components/schemas/DateTime' }

    Partner:
      allOf:
        - $ref: '#/components/schemas/SoftDelete'
        - type: object
          required: [ id, eventId, name, stake, createdAt, updatedAt ]
          properties:
            id: { $ref: '#/components/schemas/Id' }
            eventId: { $ref: '#/components/schemas/Id' }
            name: { type: string }
            stake: { $ref: '#/components/schemas/Percentage' }
            phone: { type: string }
            email: { type: string }
            notes: { type: string }
            createdAt: { $ref: '#/components/schemas/DateTime' }
            updatedAt: { $ref: '#/components/schemas/DateTime' }

    PageMeta:
      type: object
      required: [ limit, total ]
      properties:
        limit:
          type: integer
          minimum: 5
          maximum: 50
          default: 15
        nextCursor:
          type: string
          nullable: true
        total:
          type: integer
          minimum: 0
    Paged:
      type: object
      required: [ items, page ]
      properties:
        items:
          type: array
          items: { }
        page:
          $ref: '#/components/schemas/PageMeta'
    Error:
      type: object
      required: [ code, message ]
      properties:
        code:
          type: string
          enum: [ VALIDATION_ERROR, NOT_FOUND, CONFLICT, UNPROCESSABLE, FORBIDDEN ]
        message:
          type: string
        details:
          type: object
          additionalProperties: true

paths:
  /events:
    get:
      summary: Listar eventos
      parameters:
        - in:
            query; name:
              name; schema: { type: string }
        - in:
            query; name:
              dateFrom; schema: { $ref: '#/components/schemas/DateTime' }
        - in:
            query; name:
              dateTo; schema: { $ref: '#/components/schemas/DateTime' }
        - in:
            query; name:
              limit; schema: { type: integer, minimum: 5, maximum: 50, default: 15 }
        - in:
            query; name:
              after; schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Paged'
                  - type: object
                    properties:
                      items:
                        type: array
                        items: { $ref: '#/components/schemas/Event' }
    post:
      summary: Crear evento
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Event' } } } }
      responses:
        "201": { description: Creado, content: { application/json: { schema: { $ref: '#/components/schemas/Event' } } } }
        "409": { description: Conflicto (name único), content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /events/{id}:
    get: { summary: Obtener evento, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/Event' } } } }, "404": { content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } } } }
    put: { summary: Reemplazar evento, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Event' } } } }, responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/Event' } } } } } }
    patch: { summary: Actualización parcial, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Event' } } } }, responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/Event' } } } } } }
    delete: { summary: Borrado lógico, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], responses: { "204": { description: Marcado como inactivo } } }

  /reservations:
    get:
      summary: Listar reservas
      parameters:
        - in:
            query; name:
              eventId; schema: { $ref: '#/components/schemas/Id' }
        - in:
            query; name:
              reserver; schema: { type: string }
        - in:
            query; name:
              isPaid; schema: { type: boolean }
        - in:
            query; name:
              isDelivered; schema: { type: boolean }
        - in:
            query; name:
              createdAtFrom; schema: { $ref: '#/components/schemas/DateTime' }
        - in:
            query; name:
              createdAtTo; schema: { $ref: '#/components/schemas/DateTime' }
        - in:
            query; name:
              limit; schema: { type: integer, minimum: 5, maximum: 50, default: 15 }
        - in:
            query; name:
              after; schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Paged'
                  - type: object
                    properties:
                      items:
                        type: array
                        items: { $ref: '#/components/schemas/Reservation' }
    post:
      summary: Crear reserva (back calcula totalAmount/hasPromoApplied)
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Reservation' } } } }
      responses:
        "201": { description: Creado, content: { application/json: { schema: { $ref: '#/components/schemas/Reservation' } } } }
        "409": { description: Conflicto (eventId+reserver único), content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /reservations/{id}:
    get: { summary: Obtener reserva, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/Reservation' } } } }, "404": { content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } } } }
    put: { summary: Reemplazar reserva, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Reservation' } } } }, responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/Reservation' } } } } } }
    patch: { summary: Actualización parcial, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Reservation' } } } }, responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/Reservation' } } } } } }
    delete: { summary: Borrado lógico, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], responses: { "204": { description: Marcado como inactivo } } }

  /products:
    get:
      summary: Listar productos
      parameters:
        - in:
            query; name:
              eventId; schema: { $ref: '#/components/schemas/Id' }
        - in:
            query; name:
              name; schema: { type: string }
        - in:
            query; name:
              supplement; schema: { type: string }
        - in:
            query; name:
              limit; schema: { type: integer, minimum: 5, maximum: 50, default: 15 }
        - in:
            query; name:
              after; schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Paged'
                  - type: object
                    properties:
                      items:
                        type: array
                        items: { $ref: '#/components/schemas/Product' }
    post:
      summary: Crear producto (precio/IVA coherentes)
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Product' } } } }
      responses:
        "201": { description: Creado }
        "409": { description: Conflicto (eventId+name+supplement), content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /products/{id}:
    get: { summary: Obtener producto, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/Product' } } } }, "404": { content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } } } }
    put: { summary: Reemplazar producto, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Product' } } } }, responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/Product' } } } } } }
    patch: { summary: Actualización parcial, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Product' } } } }, responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/Product' } } } } } }
    delete: { summary: Borrado lógico, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], responses: { "204": { description: Marcado como inactivo } } }

  /promotions:
    get:
      summary: Listar promociones
      parameters:
        - in:
            query; name:
              eventId; schema: { $ref: '#/components/schemas/Id' }
        - in:
            query; name:
              rule; schema: { $ref: '#/components/schemas/PromotionRule' }
        - in:
            query; name:
              activeNow; schema: { type: boolean }
        - in:
            query; name:
              limit; schema: { type: integer, minimum: 5, maximum: 50, default: 15 }
        - in:
            query; name:
              after; schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Paged'
                  - type: object
                    properties:
                      items:
                        type: array
                        items: { $ref: '#/components/schemas/Promotion' }
    post:
      summary: Crear promoción (priority mayor = más prioridad)
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Promotion' } } } }
      responses:
        "201": { description: Creado }

  /promotions/{id}:
    get: { summary: Obtener promoción, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/Promotion' } } } }, "404": { content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } } } }
    put: { summary: Reemplazar promoción, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Promotion' } } } }, responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/Promotion' } } } } } }
    patch: { summary: Actualización parcial, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Promotion' } } } }, responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/Promotion' } } } } } }
    delete: { summary: Borrado lógico, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], responses: { "204": { description: Marcado como inactivo } } }

  /expenses:
    get:
      summary: Listar gastos
      parameters:
        - in:
            query; name:
              eventId; schema: { $ref: '#/components/schemas/Id' }
        - in:
            query; name:
              payerId; schema: { $ref: '#/components/schemas/Id' }
        - in:
            query; name:
              storeId; schema: { $ref: '#/components/schemas/Id' }
        - in:
            query; name:
              isVerified; schema: { type: boolean }
        - in:
            query; name:
              limit; schema: { type: integer, minimum: 5, maximum: 50, default: 15 }
        - in:
            query; name:
              after; schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Paged'
                  - type: object
                    properties:
                      items:
                        type: array
                        items: { $ref: '#/components/schemas/Expense' }
    post:
      summary: Crear gasto (IVA/importe consistentes)
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Expense' } } } }
      responses:
        "201": { description: Creado }

  /expenses/{id}:
    get: { summary: Obtener gasto, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/Expense' } } } }, "404": { content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } } } }
    put: { summary: Reemplazar gasto, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Expense' } } } }, responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/Expense' } } } } } }
    patch: { summary: Actualización parcial, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Expense' } } } }, responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/Expense' } } } } } }
    delete: { summary: Borrado lógico, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], responses: { "204": { description: Marcado como inactivo } } }

  /salespeople:
    get:
      summary: Listar vendedores
      parameters:
        - in:
            query; name:
              eventId; schema: { $ref: '#/components/schemas/Id' }
        - in:
            query; name:
              name; schema: { type: string }
        - in:
            query; name:
              limit; schema: { type: integer, minimum: 5, maximum: 50, default: 15 }
        - in:
            query; name:
              after; schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Paged'
                  - type: object
                    properties:
                      items:
                        type: array
                        items: { $ref: '#/components/schemas/Salesperson' }
    post:
      summary: Crear vendedor
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Salesperson' } } } }
      responses:
        "201": { description: Creado }
        "409": { description: Conflicto (eventId+name) }

  /salespeople/{id}:
    get: { summary: Obtener vendedor, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/Salesperson' } } } }, "404": { content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } } } }
    put: { summary: Reemplazar vendedor, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Salesperson' } } } }, responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/Salesperson' } } } } } }
    patch: { summary: Actualización parcial, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Salesperson' } } } }, responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/Salesperson' } } } } } }
    delete: { summary: Borrado lógico, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], responses: { "204": { description: Marcado como inactivo } } }

  /payment-methods:
    get:
      summary: Listar métodos de pago
      parameters:
        - in:
            query; name:
              eventId; schema: { $ref: '#/components/schemas/Id' }
        - in:
            query; name:
              name; schema: { type: string }
        - in:
            query; name:
              limit; schema: { type: integer, minimum: 5, maximum: 50, default: 15 }
        - in:
            query; name:
              after; schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Paged'
                  - type: object
                    properties:
                      items:
                        type: array
                        items: { $ref: '#/components/schemas/PaymentMethod' }
    post:
      summary: Crear método de pago
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/PaymentMethod' } } } }
      responses:
        "201": { description: Creado }
        "409": { description: Conflicto (eventId+name) }

  /payment-methods/{id}:
    get: { summary: Obtener método de pago, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/PaymentMethod' } } } }, "404": { content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } } } }
    put: { summary: Reemplazar método de pago, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/PaymentMethod' } } } }, responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/PaymentMethod' } } } } } }
    patch: { summary: Actualización parcial, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/PaymentMethod' } } } }, responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/PaymentMethod' } } } } } }
    delete: { summary: Borrado lógico, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], responses: { "204": { description: Marcado como inactivo } } }

  /cashiers:
    get:
      summary: Listar cajeros
      parameters:
        - in:
            query; name:
              eventId; schema: { $ref: '#/components/schemas/Id' }
        - in:
            query; name:
              name; schema: { type: string }
        - in:
            query; name:
              limit; schema: { type: integer, minimum: 5, maximum: 50, default: 15 }
        - in:
            query; name:
              after; schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Paged'
                  - type: object
                    properties:
                      items:
                        type: array
                        items: { $ref: '#/components/schemas/Cashier' }
    post:
      summary: Crear cajero
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Cashier' } } } }
      responses:
        "201": { description: Creado }
        "409": { description: Conflicto (eventId+name) }

  /cashiers/{id}:
    get: { summary: Obtener cajero, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/Cashier' } } } }, "404": { content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } } } }
    put: { summary: Reemplazar cajero, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Cashier' } } } }, responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/Cashier' } } } } } }
    patch: { summary: Actualización parcial, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Cashier' } } } }, responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/Cashier' } } } } } }
    delete: { summary: Borrado lógico, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], responses: { "204": { description: Marcado como inactivo } } }

  /stores:
    get:
      summary: Listar tiendas
      parameters:
        - in:
            query; name:
              eventId; schema: { $ref: '#/components/schemas/Id' }
        - in:
            query; name:
              name; schema: { type: string }
        - in:
            query; name:
              limit; schema: { type: integer, minimum: 5, maximum: 50, default: 15 }
        - in:
            query; name:
              after; schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Paged'
                  - type: object
                    properties:
                      items:
                        type: array
                        items: { $ref: '#/components/schemas/Store' }
    post:
      summary: Crear tienda
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Store' } } } }
      responses:
        "201": { description: Creado }
        "409": { description: Conflicto (eventId+name) }

  /stores/{id}:
    get: { summary: Obtener tienda, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/Store' } } } }, "404": { content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } } } }
    put: { summary: Reemplazar tienda, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Store' } } } }, responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/Store' } } } } } }
    patch: { summary: Actualización parcial, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Store' } } } }, responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/Store' } } } } } }
    delete: { summary: Borrado lógico, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], responses: { "204": { description: Marcado como inactivo } } }

  /units:
    get:
      summary: Listar unidades
      parameters:
        - in:
            query; name:
              eventId; schema: { $ref: '#/components/schemas/Id' }
        - in:
            query; name:
              name; schema: { type: string }
        - in:
            query; name:
              limit; schema: { type: integer, minimum: 5, maximum: 50, default: 15 }
        - in:
            query; name:
              after; schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Paged'
                  - type: object
                    properties:
                      items:
                        type: array
                        items: { $ref: '#/components/schemas/Unit' }
    post:
      summary: Crear unidad
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Unit' } } } }
      responses:
        "201": { description: Creado }
        "409": { description: Conflicto (eventId+name) }

  /units/{id}:
    get: { summary: Obtener unidad, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/Unit' } } } }, "404": { content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } } } }
    put: { summary: Reemplazar unidad, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Unit' } } } }, responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/Unit' } } } } } }
    patch: { summary: Actualización parcial, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Unit' } } } }, responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/Unit' } } } } } }
    delete: { summary: Borrado lógico, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], responses: { "204": { description: Marcado como inactivo } } }

  /consumption-types:
    get:
      summary: Listar tipos de consumo
      parameters:
        - in:
            query; name:
              eventId; schema: { $ref: '#/components/schemas/Id' }
        - in:
            query; name:
              name; schema: { type: string }
        - in:
            query; name:
              limit; schema: { type: integer, minimum: 5, maximum: 50, default: 15 }
        - in:
            query; name:
              after; schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Paged'
                  - type: object
                    properties:
                      items:
                        type: array
                        items: { $ref: '#/components/schemas/ConsumptionType' }
    post:
      summary: Crear tipo de consumo
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/ConsumptionType' } } } }
      responses:
        "201": { description: Creado }
        "409": { description: Conflicto (eventId+name) }

  /consumption-types/{id}:
    get: { summary: Obtener tipo de consumo, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/ConsumptionType' } } } }, "404": { content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } } } }
    put: { summary: Reemplazar tipo de consumo, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/ConsumptionType' } } } }, responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/ConsumptionType' } } } } } }
    patch: { summary: Actualización parcial, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/ConsumptionType' } } } }, responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/ConsumptionType' } } } } } }
    delete: { summary: Borrado lógico, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], responses: { "204": { description: Marcado como inactivo } } }

  /payers:
    get:
      summary: Listar pagadores
      parameters:
        - in:
            query; name:
              eventId; schema: { $ref: '#/components/schemas/Id' }
        - in:
            query; name:
              name; schema: { type: string }
        - in:
            query; name:
              limit; schema: { type: integer, minimum: 5, maximum: 50, default: 15 }
        - in:
            query; name:
              after; schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Paged'
                  - type: object
                    properties:
                      items:
                        type: array
                        items: { $ref: '#/components/schemas/Payer' }
    post:
      summary: Crear pagador
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Payer' } } } }
      responses:
        "201": { description: Creado }
        "409": { description: Conflicto (eventId+name) }

  /payers/{id}:
    get: { summary: Obtener pagador, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/Payer' } } } }, "404": { content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } } } }
    put: { summary: Reemplazar pagador, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Payer' } } } }, responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/Payer' } } } } } }
    patch: { summary: Actualización parcial, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Payer' } } } }, responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/Payer' } } } } } }
    delete: { summary: Borrado lógico, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], responses: { "204": { description: Marcado como inactivo } } }

  /pickup-points:
    get:
      summary: Listar puntos de recogida
      parameters:
        - in:
            query; name:
              eventId; schema: { $ref: '#/components/schemas/Id' }
        - in:
            query; name:
              name; schema: { type: string }
        - in:
            query; name:
              limit; schema: { type: integer, minimum: 5, maximum: 50, default: 15 }
        - in:
            query; name:
              after; schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Paged'
                  - type: object
                    properties:
                      items:
                        type: array
                        items: { $ref: '#/components/schemas/PickupPoint' }
    post:
      summary: Crear punto de recogida
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/PickupPoint' } } } }
      responses:
        "201": { description: Creado }
        "409": { description: Conflicto (eventId+name) }

  /pickup-points/{id}:
    get: { summary: Obtener punto de recogida, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/PickupPoint' } } } }, "404": { content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } } } }
    put: { summary: Reemplazar punto de recogida, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/PickupPoint' } } } }, responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/PickupPoint' } } } } } }
    patch: { summary: Actualización parcial, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/PickupPoint' } } } }, responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/PickupPoint' } } } } } }
    delete: { summary: Borrado lógico, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], responses: { "204": { description: Marcado como inactivo } } }

  /partners:
    get:
      summary: Listar socios
      parameters:
        - in:
            query; name:
              eventId; schema: { $ref: '#/components/schemas/Id' }
        - in:
            query; name:
              name; schema: { type: string }
        - in:
            query; name:
              limit; schema: { type: integer, minimum: 5, maximum: 50, default: 15 }
        - in:
            query; name:
              after; schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Paged'
                  - type: object
                    properties:
                      items:
                        type: array
                        items: { $ref: '#/components/schemas/Partner' }
    post:
      summary: Crear socio
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Partner' } } } }
      responses:
        "201": { description: Creado }
        "409": { description: Conflicto (eventId+name) }

  /partners/{id}:
    get: { summary: Obtener socio, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/Partner' } } } }, "404": { content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } } } }
    put: { summary: Reemplazar socio, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Partner' } } } }, responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/Partner' } } } } } }
    patch: { summary: Actualización parcial, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Partner' } } } }, responses: { "200": { content: { application/json: { schema: { $ref: '#/components/schemas/Partner' } } } } } }
    delete: { summary: Borrado lógico, parameters: [ { in: path, name: id, required: true, schema: { $ref: '#/components/schemas/Id' } } ], responses: { "204": { description: Marcado como inactivo } } }
